{
	"info": {
		"_postman_id": "6322a5dc-ccef-4750-83bb-78d9321cf356",
		"name": "Demo_App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "4969429-6322a5dc-ccef-4750-83bb-78d9321cf356"
	},
	"item": [
		{
			"name": "GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data array structure is valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.data.forEach(function(item) {",
							"    pm.expect(item).to.have.property('id').that.is.a('number');",
							"    pm.expect(item).to.have.property('email').that.is.a('string');",
							"    pm.expect(item).to.have.property('first_name').that.is.a('string');",
							"    pm.expect(item).to.have.property('last_name').that.is.a('string');",
							"    pm.expect(item).to.have.property('avatar').that.is.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Support object is present and contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"    pm.expect(responseData.support).to.have.property('url');",
							"    pm.expect(responseData.support).to.have.property('text');",
							"});",
							"",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "00d636cf-0dae-4780-93ec-1085cd02c80d"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "ad88b9cb-8139-4a65-a2a3-04bd2ac5c6b9"
					}
				}
			],
			"id": "fe65cb72-1ac5-45fe-b08d-0ed160923ebd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This endpoint retrieves a list of users.\n\n### Request\n\nNo request body is required for this GET request.\n\n### Response\n\nThe response will be in JSON format with the following fields:\n\n- `page` (number): The current page number.\n    \n- `per_page` (number): The number of users per page.\n    \n- `total` (number): The total number of users.\n    \n- `total_pages` (number): The total number of pages.\n    \n- `data` (array): An array of user objects, each containing the following fields:\n    \n    - `id` (number): The user's ID.\n        \n    - `email` (string): The user's email address.\n        \n    - `first_name` (string): The user's first name.\n        \n    - `last_name` (string): The user's last name.\n        \n    - `avatar` (string): The URL of the user's avatar image.\n        \n- `support` (object): An object containing support information with the following fields:\n    \n    - `url` (string): The URL for support.\n        \n    - `text` (string): The support text."
			},
			"response": []
		},
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "9ab10953-364c-46d6-8da7-b3ba11608554"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stores the userId in an environment or global variable\r",
							"var userId = pm.response.json().id;\r",
							"pm.globals.set(\"userId\", userId);",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name, job, id, and createdAt\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.include.all.keys('name', 'job', 'id', 'createdAt');",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Job is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id and createdAt are in valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('string');",
							"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"});"
						],
						"type": "text/javascript",
						"id": "7cec3951-e8b6-43be-85e2-7d48d6f5293f"
					}
				}
			],
			"id": "faa4719a-5f9d-4cb9-b664-d5abd6b66da2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ritesh\",\r\n    \"job\": \"lead\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c2ad41a-5c1b-4156-879a-3748fc5d9bbd",
						"exec": [
							"\r",
							"",
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate that the response does not contain any user data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a4148aff-ab4a-4320-8f40-d477154c6963",
						"exec": [
							"//Local Variables\r",
							"//pm.variables.set(\"userId\",1);\r",
							"\r",
							"//Environment Variables\r",
							"//pm.environment.set(\"userId\",2);\r",
							"\r",
							"//Collection Variables\r",
							"//pm.collectionVariables.set(\"userId\", 3);\r",
							"//pm.collectionVariables.get(\"userId\");\r",
							"\r",
							"//Global Variables\r",
							"//pm.globals.set(\"userId\", 4);\r",
							"//pm.globals.get(\"userId\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "898401bb-8f0a-42f0-b562-4571ee623006",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8b71d2f5-55c0-4c56-8305-2726e4ed9dd0",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "73bafa3f-a6a9-4322-811b-d3f434cf6bb7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "bd9c7248-6085-4c1d-b542-81464c9df818",
			"key": "userId",
			"value": "3",
			"type": "string"
		}
	]
}