{
	"info": {
		"_postman_id": "d5183136-eb65-426e-9166-3c9980315ad2",
		"name": "Demp_App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4969429"
	},
	"item": [
		{
			"name": "GetUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data array structure is valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.data.forEach(function(item) {",
							"    pm.expect(item).to.have.property('id').that.is.a('number');",
							"    pm.expect(item).to.have.property('email').that.is.a('string');",
							"    pm.expect(item).to.have.property('first_name').that.is.a('string');",
							"    pm.expect(item).to.have.property('last_name').that.is.a('string');",
							"    pm.expect(item).to.have.property('avatar').that.is.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Support object is present and contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"    pm.expect(responseData.support).to.have.property('url');",
							"    pm.expect(responseData.support).to.have.property('text');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This endpoint retrieves a list of users.\n\n### Request\n\nNo request body is required for this GET request.\n\n### Response\n\nThe response will be in JSON format with the following fields:\n\n- `page` (number): The current page number.\n    \n- `per_page` (number): The number of users per page.\n    \n- `total` (number): The total number of users.\n    \n- `total_pages` (number): The total number of pages.\n    \n- `data` (array): An array of user objects, each containing the following fields:\n    \n    - `id` (number): The user's ID.\n        \n    - `email` (string): The user's email address.\n        \n    - `first_name` (string): The user's first name.\n        \n    - `last_name` (string): The user's last name.\n        \n    - `avatar` (string): The URL of the user's avatar image.\n        \n- `support` (object): An object containing support information with the following fields:\n    \n    - `url` (string): The URL for support.\n        \n    - `text` (string): The support text."
			},
			"response": []
		}
	]
}